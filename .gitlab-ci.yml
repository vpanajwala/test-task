stages:
  - build
  - push
  - deploy

variables:
  BACKEND_IMAGE: $DOCKER_REGISTRY/backend:$CI_COMMIT_SHORT_SHA
  FRONTEND_IMAGE: $DOCKER_REGISTRY/frontend:$CI_COMMIT_SHORT_SHA

# Build & push using docker:dind
build_and_push:
  image: docker:24.0.2
  services:
    - docker:24.0.2-dind
  stage: push
  before_script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin $DOCKER_REGISTRY
  script:
    - docker build -t $BACKEND_IMAGE ./backend
    - docker push $BACKEND_IMAGE
    - docker build -t $FRONTEND_IMAGE ./frontend
    - docker push $FRONTEND_IMAGE
  only:
    - branches

deploy_to_server:
  image: alpine:latest
  stage: deploy
  tags:
    - deploy   # make sure the registered runner uses this tag
  before_script:
    - apk add --no-cache openssh-client bash
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
  script:
    - |
      ssh $DEPLOY_USER@$DEPLOY_HOST "mkdir -p /opt/myapp && cd /opt/myapp &&
      cat > .env <<'EOF'
      BACKEND_IMAGE=$BACKEND_IMAGE
      FRONTEND_IMAGE=$FRONTEND_IMAGE
      EOF
      if [ ! -f docker-compose.yml ]; then
        cat > docker-compose.yml <<'DCF'
        version: '3.8'
        services:
          backend:
            image: ${BACKEND_IMAGE}
            restart: always
            networks: [webnet]
          frontend:
            image: ${FRONTEND_IMAGE}
            restart: always
            networks: [webnet]
          nginx:
            image: nginx:stable-alpine
            ports: ["80:80","443:443"]
            volumes:
              - ./default.conf:/etc/nginx/conf.d/default.conf:ro
            networks: [webnet]
        networks:
          webnet: {}
        DCF
      fi
      docker compose pull && docker compose up -d --remove-orphans"
  only:
    - main
